#!/usr/bin/with-contenv bash

readonly TS=$(date -Iseconds)
msg() {
	echo "[${TS}] $*"
}

declare -A country_id=(
	['CA']=38
	['Canada']=38
	['US']=228
	['United_States']=228
)

if [[ -z "${COUNTRY}" ]]; then
	msg 'COUNTRY envariable has not been specified'
	sleep infinity
fi

declare -i isCA=0
declare -i isUS=0

case "${COUNTRY}" in
	      Canada) isCA=1;;
	United_States) isUS=1;;
	           *) msg 'Invalid Country.  Allowed: <Canada | United_States>'
	              sleep infinity
	              ;;
esac

QUERY="filters\[country_id\]=${country_id[${COUNTRY}]}"

if [[ -z ${PUBLIC_KEY} || -z ${END_POINT} ]]; then
	msg "Finding the best server..."
	read -r recommendations < <(curl --retry 3 -LsS "https://api.nordvpn.com/v1/servers?&limit=99999&filters\[servers_technologies\]\[identifier\]=wireguard_udp&${QUERY}")

	if (( isCA )); then
		# Vancouver
		read -r server < <(jq -c '[.[] | select(.locations[].country.city.name=="Vancouver")] | sort_by(.load) | first' <<< "${recommendations}")
	elif (( isUS )); then
		# Los Angeles
		# San Francisco
		#TODO: Allow 'City(s)' to be passed via envariable
		read -r server < <(jq -c 'map(select(any(.locations[].country.city; .name == "Los Angeles" or .name == "San Francisco"))) | sort_by(.load) | first' <<< "${recommendations}" )
	else
		#TT: Should never get here
		msg '[1]Invalid Country.  Allowed: <Canada | United_States>'
		sleep infinity
	fi

	if [[ -z "${server}" || "${server}" = 'null' ]]; then
		msg "Unable to select a server ¯\_(⊙︿⊙)_/¯ : ${server}"
		sleep infinity
	fi

	read -r hostname < <(jq -r '.hostname' <<< "${server}")
	msg "Using server: ${hostname}"

	if [[ -z ${PUBLIC_KEY} ]]; then
		read -r PUBLIC_KEY < <(jq -r '.technologies[] | select( .identifier == "wireguard_udp" ) | .metadata[] | select( .name == "public_key" ) | .value' <<< "${server}")
	fi
	if [[ -z ${END_POINT} ]]; then
		END_POINT="${hostname}"
		if [[ -z "${END_POINT}" ]]; then
			msg 'Unable to determine: END_POINT'
		fi
		END_POINT+=":51820"
	fi
fi

( umask 077 && { cat >/etc/wireguard/wg0.conf <<-EOF
[Interface]
PrivateKey = ${PRIVATE_KEY}
ListenPort = ${LISTEN_PORT:-51820}
Address = ${ADDRESS:-10.5.0.2/32}
DNS = ${DNS}
Table = ${TABLE}
PreUp = ${PRE_UP}
PostUp = ${POST_UP}
PreDown = ${PRE_DOWN}
PostDown = ${POST_DOWN}

[Peer]
Endpoint = ${END_POINT}
PublicKey = ${PUBLIC_KEY}
AllowedIPs = ${ALLOWED_IPS:-0.0.0.0/0}
PersistentKeepalive = ${PERSISTENT_KEEP_ALIVE:-25}
EOF
} && sync )

echo "[$(date -Iseconds)] Connecting..."
wg-quick up wg0 
echo "[$(date -Iseconds)] Connected! \(ᵔᵕᵔ)/"

if [[ -n ${RECONNECT} ]]; then
  echo "[$(date -Iseconds)] Reconnecting in ${RECONNECT} seconds"
fi
sleep "${RECONNECT:-infinity}"
